name: Passing Values Between Jobs Demo

on:
  workflow_call:
    inputs:
      demo_prefix:
        description: "Prefix for the generated app name"
        required: false
        type: string
        default: "MyApp"
    outputs:
      # Outputs that can be used by calling workflows
      final_app_name:
        description: "The final generated app name"
        value: ${{ jobs.build_save_name.outputs.generated_name }}
      final_build_time:
        description: "When the build was created"
        value: ${{ jobs.build_save_name.outputs.build_time }}
      final_build_number:
        description: "Random build number generated"
        value: ${{ jobs.build_save_name.outputs.build_number }}

jobs:
  # === DEMO: Passing variables between jobs ===
  build_save_name:
    runs-on: ubuntu-latest
    outputs:
      # Define outputs that other jobs can use
      generated_name: ${{ steps.generate.outputs.name }}
      build_time: ${{ steps.generate.outputs.time }}
      build_number: ${{ steps.generate.outputs.number }}
    steps:
      - name: Generate variables
        id: generate
        run: |
          # Generate some variables
          NAME="${{ inputs.demo_prefix }}-$(date +%Y%m%d)"
          TIME=$(date +"%Y-%m-%d %H:%M:%S")
          NUMBER=$((RANDOM % 1000))
          
          echo "üîß Generated variables:"
          echo "  NAME: $NAME"
          echo "  TIME: $TIME"
          echo "  NUMBER: $NUMBER"
          
          # Set outputs for other jobs to use
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "time=$TIME" >> $GITHUB_OUTPUT
          echo "number=$NUMBER" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Variables saved as job outputs"

  build_load_name:
    runs-on: ubuntu-latest
    needs: build_save_name  # This job depends on build_save_name
    steps:
      - name: Load and use variables from previous job
        run: |
          echo "üì• Loading variables from previous job:"
          echo "  Generated Name: ${{ needs.build_save_name.outputs.generated_name }}"
          echo "  Build Time: ${{ needs.build_save_name.outputs.build_time }}"
          echo "  Build Number: ${{ needs.build_save_name.outputs.build_number }}"
          
          # You can also assign them to environment variables
          APP_NAME="${{ needs.build_save_name.outputs.generated_name }}"
          BUILD_TIME="${{ needs.build_save_name.outputs.build_time }}"
          BUILD_NUM="${{ needs.build_save_name.outputs.build_number }}"
          
          echo ""
          echo "üéØ Using variables in this job:"
          echo "  Processing app: $APP_NAME"
          echo "  Built at: $BUILD_TIME"
          echo "  Build #: $BUILD_NUM"
          
          # Example: Use in a conditional
          if [ "$BUILD_NUM" -gt 500 ]; then
            echo "üöÄ High build number detected!"
          else
            echo "üì¶ Standard build number"
          fi

  # Bonus: Show how to pass complex data (JSON)
  complex_data_demo:
    runs-on: ubuntu-latest
    needs: build_save_name
    outputs:
      app_info: ${{ steps.create_json.outputs.info }}
    steps:
      - name: Create complex data structure
        id: create_json
        run: |
          # Create a JSON object with the data from previous job
          APP_INFO=$(cat << EOF
          {
            "name": "${{ needs.build_save_name.outputs.generated_name }}",
            "buildTime": "${{ needs.build_save_name.outputs.build_time }}",
            "buildNumber": ${{ needs.build_save_name.outputs.build_number }},
            "status": "completed",
            "environment": "demo"
          }
          EOF
          )
          
          echo "üì¶ Created complex data structure:"
          echo "$APP_INFO" | jq '.'
          
          # Save as output (need to escape for GitHub)
          echo "info<<EOF" >> $GITHUB_OUTPUT
          echo "$APP_INFO" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  use_complex_data:
    runs-on: ubuntu-latest
    needs: [build_save_name, complex_data_demo]
    steps:
      - name: Parse and use complex data
        run: |
          echo "üîç Parsing complex data from previous job:"
          
          # Parse JSON data
          APP_INFO='${{ needs.complex_data_demo.outputs.app_info }}'
          echo "$APP_INFO" | jq '.'
          
          # Extract specific values
          APP_NAME=$(echo "$APP_INFO" | jq -r '.name')
          BUILD_NUM=$(echo "$APP_INFO" | jq -r '.buildNumber')
          STATUS=$(echo "$APP_INFO" | jq -r '.status')
          
          echo ""
          echo "üìã Extracted values:"
          echo "  App Name: $APP_NAME"
          echo "  Build Number: $BUILD_NUM"
          echo "  Status: $STATUS"